import { config, validateConfig } from './config';
import { GoogleSheetsService } from './services/googleSheets';
import { OptimizedSyncService } from './services/optimizedSync';

/**
 * Script de Sincronizaci√≥n Completa
 *
 * Sincroniza TODOS los modelos del Google Sheet a Shopify
 * - Cada modelo se sube como producto padre con todas sus variantes
 * - Cada medida tambi√©n se sube como producto individual
 * - Procesamiento modelo por modelo con delays para respetar rate limits
 */
async function syncAll() {
  try {
    console.log('üöÄ SINCRONIZACI√ìN COMPLETA: Todos los Modelos\n');
    console.log('‚ïê'.repeat(60));

    // Validar configuraci√≥n
    validateConfig();
    console.log('‚úÖ Configuraci√≥n validada\n');

    // Servicios
    const googleSheets = new GoogleSheetsService();
    const syncService = new OptimizedSyncService();

    // 1. Leer datos
    console.log('üì• Leyendo datos de Google Sheets...');
    const { panelPrecios } = await googleSheets.readAllData();
    console.log(`   ‚úÖ ${panelPrecios.length} productos le√≠dos\n`);

    // 2. Mostrar estad√≠sticas
    console.log('‚ïê'.repeat(60));
    console.log('üìä ESTAD√çSTICAS PREVIAS');
    console.log('‚ïê'.repeat(60));

    // Agrupar por modelo para contar
    const marcasSet = new Set(panelPrecios.map(p => p['Marca']));
    const modelosSet = new Set(panelPrecios.map(p => `${p['Marca']}|${p['Modelo']}`));

    console.log(`   üì¶ Total de productos en Sheet: ${panelPrecios.length}`);
    console.log(`   üè∑Ô∏è  Marcas √∫nicas: ${marcasSet.size}`);
    console.log(`   üì¶ Modelos √∫nicos: ${modelosSet.size}`);
    console.log(`\n   Se crear√°n:`);
    console.log(`      ‚Ä¢ ${modelosSet.size} productos PADRE (1 por modelo)`);
    console.log(`      ‚Ä¢ ${panelPrecios.length} productos INDIVIDUALES (1 por medida)`);
    console.log(`      ‚Ä¢ Total: ${modelosSet.size + panelPrecios.length} productos`);
    console.log(`      ‚Ä¢ Stock: 20 unidades por producto/variante`);

    // 3. Confirmaci√≥n
    console.log('\n‚ïê'.repeat(60));
    console.log('‚ö†Ô∏è  ADVERTENCIA: Esta operaci√≥n subir√° TODOS los productos');
    console.log('‚ïê'.repeat(60));
    console.log(`   üîó Tienda: ${config.shopifyShopDomain}`);
    console.log(`   üì¶ ${modelosSet.size} productos padre`);
    console.log(`   üì¶ ${panelPrecios.length} productos individuales`);
    console.log(`\n   El proceso puede tomar varios minutos dependiendo de la cantidad de productos.`);
    console.log(`   Los productos se subir√°n modelo por modelo para respetar rate limits.`);

    console.log('\n‚è≥ Iniciando sincronizaci√≥n en 10 segundos...');
    console.log('   (Presiona Ctrl+C para cancelar)');
    console.log('‚ïê'.repeat(60));

    await new Promise(resolve => setTimeout(resolve, 10000));

    // 4. Sincronizar todos los modelos
    const startTime = Date.now();
    const results = await syncService.syncModels(panelPrecios);
    const endTime = Date.now();

    // 5. Estad√≠sticas finales
    const duration = Math.round((endTime - startTime) / 1000);
    const minutes = Math.floor(duration / 60);
    const seconds = duration % 60;

    console.log('\n‚ïê'.repeat(60));
    console.log('‚úÖ SINCRONIZACI√ìN COMPLETADA');
    console.log('‚ïê'.repeat(60));
    console.log(`   ‚è±Ô∏è  Tiempo total: ${minutes}m ${seconds}s`);
    console.log(`\nüîó Ver productos en Shopify:`);
    console.log(`   https://${config.shopifyShopDomain}/admin/products`);
    console.log('‚ïê'.repeat(60));

    // Limpieza
    syncService.cleanup();

    // Verificar resultados
    const totalSuccess = results.filter(r => r.parentSuccess).length;
    const totalFailed = results.length - totalSuccess;

    if (totalFailed === 0) {
      console.log('\nüéâ ¬°SINCRONIZACI√ìN EXITOSA! Todos los modelos fueron subidos correctamente.\n');
    } else {
      console.log(`\n‚ö†Ô∏è  Sincronizaci√≥n completada con ${totalFailed} modelos fallidos.\n`);
      console.log('üí° Revisa los logs arriba para m√°s detalles sobre los errores.\n');
    }

  } catch (error) {
    console.error('\n‚ùå Error durante la sincronizaci√≥n:', error);
    process.exit(1);
  }
}

// Ejecutar
syncAll();
